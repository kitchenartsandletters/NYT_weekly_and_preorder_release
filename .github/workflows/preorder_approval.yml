name: Preorder Approval Workflow

permissions:
  contents: write
  issues: write

on:
  # Run weekly on Friday to prepare for the Monday report
  schedule:
    - cron: '0 0 * * 5'  # Midnight on Friday
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      run_mode:
        description: 'Run mode (test or production)'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production

jobs:
  audit-and-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify preorder history file
        run: python verify-history-file.py
      
      - name: Create environment file
        run: |
          echo "SHOP_URL=${{ secrets.SHOP_URL }}" > .env.production
          echo "SHOPIFY_ACCESS_TOKEN=${{ secrets.SHOPIFY_ACCESS_TOKEN }}" >> .env.production
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env.production
          echo "EMAIL_SENDER=${{ secrets.EMAIL_SENDER }}" >> .env.production
          echo "EMAIL_RECIPIENTS=${{ secrets.EMAIL_RECIPIENTS }}" >> .env.production
          
          # Set test mode based on input parameter - ONLY set this in test mode
          if [ "${{ github.event.inputs.run_mode }}" = "test" ]; then
            echo "USE_TEST_DATA=true" >> .env.production
            echo "ðŸ§ª Running in TEST mode"
          else
            # Make sure it's explicitly set to false in production mode
            echo "USE_TEST_DATA=false" >> .env.production
            echo "ðŸš€ Running in PRODUCTION mode"
          fi
          
          # Display the file contents (mask sensitive values)
          cat .env.production | sed 's/\(.*TOKEN.*=\).*/\1****/' | sed 's/\(.*KEY.*=\).*/\1****/'
      
      - name: Run publication date audit
        id: run-audit
        continue-on-error: true
        run: |
          # Create output directories
          mkdir -p output audit overrides
          
          # Run the audit
          TIMESTAMP=$(date +'%Y-%m-%d')
          RELEASES_FILE="./output/pending_releases_${TIMESTAMP}.json"
          
          # Run the audit with verbose output
          echo "Running audit script with output to console..."

          if [ "${{ github.event.inputs.run_mode }}" = "test" ]; then
            python -u audit_publication_dates.py --output-releases "$RELEASES_FILE" --test-mode
          else
            python -u audit_publication_dates.py --output-releases "$RELEASES_FILE"
          fi
          
          echo "releases_file=$RELEASES_FILE" >> $GITHUB_OUTPUT
      
      - name: Create test release file if needed
        id: create-manual-file
        run: |
          if [ ! -f "${{ steps.run-audit.outputs.releases_file }}" ]; then
            echo "Creating a test release file manually"
            mkdir -p output
            MANUAL_FILE="./output/pending_releases_manual.json"
            
            echo "{" > $MANUAL_FILE
            echo '  "pending_releases": [' >> $MANUAL_FILE
            echo '    {' >> $MANUAL_FILE
            echo '      "isbn": "9780262551311",' >> $MANUAL_FILE
            echo '      "title": "Modern Chinese Foodways",' >> $MANUAL_FILE
            echo '      "quantity": 2,' >> $MANUAL_FILE
            echo '      "pub_date": "2025-03-01"' >> $MANUAL_FILE
            echo '    },' >> $MANUAL_FILE
            echo '    {' >> $MANUAL_FILE
            echo '      "isbn": "9784756256522",' >> $MANUAL_FILE
            echo '      "title": "Fishes of Edo: A Guide to Classical Japanese Fishes",' >> $MANUAL_FILE
            echo '      "quantity": 10,' >> $MANUAL_FILE
            echo '      "pub_date": "2025-03-01"' >> $MANUAL_FILE
            echo '    }' >> $MANUAL_FILE
            echo '  ],' >> $MANUAL_FILE
            echo '  "error_cases": [],' >> $MANUAL_FILE
            echo '  "total_quantity": 12,' >> $MANUAL_FILE
            echo '  "run_date": "2025-03-12",' >> $MANUAL_FILE
            echo '  "total_pending_books": 2' >> $MANUAL_FILE
            echo "}" >> $MANUAL_FILE
            
            echo "manual_file=$MANUAL_FILE" >> $GITHUB_OUTPUT
            echo "Created manual test file: $MANUAL_FILE"
            cat $MANUAL_FILE
          else
            echo "Audit file exists, no need to create manual file"
          fi
      
      - name: Check for pending releases
        id: check-releases
        run: |
          RELEASES_FILE="${{ steps.run-audit.outputs.releases_file }}"
          if [ ! -f "$RELEASES_FILE" ] && [ -n "${{ steps.create-manual-file.outputs.manual_file }}" ]; then
            RELEASES_FILE="${{ steps.create-manual-file.outputs.manual_file }}"
            echo "Using manual test file instead: $RELEASES_FILE"
          fi
          
          if [ -f "$RELEASES_FILE" ]; then
            cat "$RELEASES_FILE"  # Show file contents
            PENDING_COUNT=$(python -c "import json; f=open('$RELEASES_FILE'); data=json.load(f); print(data.get('total_pending_books', 0))")
            echo "Found $PENDING_COUNT pending book releases"
            echo "pending_count=$PENDING_COUNT" >> $GITHUB_OUTPUT
            echo "releases_file=$RELEASES_FILE" >> $GITHUB_OUTPUT
          else
            echo "No pending releases file found"
            echo "pending_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Create approval issue
        if: steps.check-releases.outputs.pending_count > '0'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // Try to use the audit file first, fall back to manual file if it exists
            let releasesFile = '${{ steps.check-releases.outputs.releases_file }}';
            
            if (!fs.existsSync(releasesFile)) {
              console.log(`Audit file not found: ${releasesFile}`);
              releasesFile = 'output/pending_releases_manual.json';
              console.log(`Trying manual file: ${releasesFile}`);
            }
            
            try {
              fs.accessSync(releasesFile, fs.constants.F_OK);
              console.log(`File exists: ${releasesFile}`);
              
              const fileStats = fs.statSync(releasesFile);
              console.log(`File size: ${fileStats.size} bytes`);
              
              const dirName = require('path').dirname(releasesFile);
              const dirContents = fs.readdirSync(dirName);
              console.log(`Directory contents of ${dirName}:`, dirContents);
              
              const pendingData = JSON.parse(fs.readFileSync(releasesFile, 'utf8'));
              const timestamp = new Date().toISOString().split('T')[0];
              
              // Function to format date from YYYY-MM-DD to Month DD, YYYY
              const formatDate = (dateStr) => {
                if (!dateStr || dateStr === 'Unknown') return 'Unknown';
                try {
                  const [year, month, day] = dateStr.split('-');
                  const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
                  return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
                } catch (e) {
                  return dateStr; // Return original string if parsing fails
                }
              };
              
              // Format books as a markdown table with updated column names
              let booksTable = '| Approve | ISBN | Title | QTY Presold | Inventory | Pub Date | Publisher |\n|---------|------|-------|------------|-----------|----------|----------|\n';
              
              pendingData.pending_releases.forEach(book => {
                // Use original_pub_date as the pub date if it exists
                const pubDate = book.original_pub_date || book.pub_date || 'Unknown';
                const formattedPubDate = formatDate(pubDate);
                
                // Use vendor directly as the publisher
                const publisher = book.vendor || 'Unknown';
                const inventory = book.inventory || 0;
                
                booksTable += `| [ ] | ${book.isbn} | ${book.title} | ${book.quantity} | ${inventory} | ${formattedPubDate} | ${publisher} |\n`;
              });
              
              // Create issue with approval checkboxes and more detailed instructions
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸ“š Preorder Approval: ${pendingData.total_pending_books} Books Ready for Release (${timestamp})`,
                body: `## Preorder Books Ready for Release Approval
  
              **Important: Please review these preorder books before they are included in the weekly sales report.**
              
              Check the boxes for books that should be included in this week's report. Books with unchecked boxes will remain in preorder status.
              
              ### Instructions
              1. Review each book's details
              2. Check the box in the "Approve" column for books that should be included
                - IMPORTANT: Use exactly \`[x]\` for approved books (lowercase x, no spaces)
                - Incorrect formats like \`[ x]\`, \`[X]\`, or \`[ x ]\` won't be recognized
              3. Add the label \`approved\` to this issue when you've finished reviewing
              4. Only checked books will have their sales included in the next report
              
              ### Books Pending Approval
              
              ${booksTable}
              
              ### Notes
              - This approval is required by: Monday at 8:00 AM
              - Books not approved will remain in preorder status
              - Data file: \`${releasesFile}\``,
                              labels: ['pending-approval', 'preorders']
                            });
                            
                            console.log(`Created approval issue #${issue.data.number}`);
                          } catch (error) {
                            console.error(`Error processing releases file: ${error.message}`);
                            core.setFailed(`Could not create approval issue: ${error.message}`);
                          }
                
      - name: Upload pending releases file
        if: steps.check-releases.outputs.pending_count > '0'
        uses: actions/upload-artifact@v4
        with:
          name: pending-releases
          path: ${{ steps.check-releases.outputs.releases_file }}